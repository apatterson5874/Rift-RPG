@startuml

abstract class Character{
    + name: String
    + maxHp: int
    + hp: int
    + xp: int
    # maxMana: int
    # mana: int
    # maxManaShield: int
    # manaShield: int
    # abilities: ArrayList<Ability>
    + Character(name, maxHp, xp, maxMana, maxManaShield)
    + {abstract} attack(): int
    + {abstract} defend(): int
}

class Main{
    + {static} main(String[]): void
}

class Player{
    + numAtkUpgrades: int
    + numDefUpgrades: int
    + atkUpgrades: String[]
    + defUpgrades: String[]
    gold: int
    restsLeft: int
    pots: int
    - weapon: item
    - armor: item
    - accessory: item
    + inventory: ArrayList<Item>
    + playerClass: PlayerClass
    - strength: int
    - intelligence: int
    - dexterity: int
    - constitution: int
    + Player(String, PlayerClass)
    + chooseTrait(): void
    + attack(): int
    + defend(): int
    + getEquipmentHpBonus(): int
    + equipItem(Item): void
    + getEquipmentString(): String
    - getBaseMana(PlayerClass): int
    - getBaseManaShield(PlayerClass): int
    - initializeClassStats(): void
    - learnClassAbilities(): void
    - getClassAttackMultiplier(): double
    - getStatAttackBonus(): int


}

class Enemy{
    playerXp: int
    + Enemy(String, int)
    + attack(): int
    + defend(): int
}

class Story{
    + {static} printIntro(): void
    + {static} printFirstActIntro(): void
    + {static} printFirstActOutro(): void
    + {static} printSecondActIntro(): void
    + {static} printSecondActOutro(): void
    + {static} printThirdActIntro(): void
    + {static} printThirdActOutro(): void
    + {static} printFourthActIntro(): void
    + {static} printEnd(Player): void
}

class GameLogic{
    + {static} isRunning: boolean
    + {static} encounters: String[]
    + {static} enemies: String[]
    + {static} place: int
    + {static} act: int
    + {static} places: String[]
    player: Player
    scanner: Scanner
    + {static} readInt(String, int): int
    + {static} clearConsole(): void
    + {static} printSeparator(int): void
    + {static} printHeading(String): void
    + {static} anythingToContinue(): void
    + {static} startGame(): void
    + {static} checkAct(): void
    + {static} randomEncounter(): void
    + {static} continueJourney(): void
    + {static} shop(): void
    + {static} takeRest(): void
    + {static} randomBattle(): void
    + {static} battle(Enemy): void
    + {static} printMenu(): void
    + {static} manageInventory(): void
    + {static} finalBattle(): void
    + {static} playerDied(): void
    + {static} gameLoop(): void
}

class Item{
    + name: String
    + type: String
    + atkBonus: int
    + defBonus: int
    + hpBonus: int
    + value: int
    + Item(String, String, int, int, int, int)
    + {static} createCommonItems(): Item[]
}

enum PlayerClass{
    WARRIOR
    MAGE
    ROGUE
    CLERIC
}

abstract class Ability{
    # name: String
    # description: String
    # manaCost: int
    + Ability(name, description, manaCost): Ability
    + execute(Character, Character): int
    + getName(): String
    + getDescription(): String
    + getManaCost(): int
}


Character <|-- Player
Character <|-- Enemy
PlayerClass <|-- Player
Ability <|-- Player
GameLogic --> Player : manages
GameLogic --> Enemy : creates
GameLogic --> Story : calls methods
GameLogic --> Item
Story --> Player : references
Main --> GameLogic : calls methods


@enduml